---
export interface Props {
  allimg:Data[]
}
interface Data {
  id:number
  img:string
}

const { allimg } = Astro.props 



---

<section class="group mb-8 w-scren max-w-[1440px] mx-auto">
  <section
    class="relative cont  barnerContainer flex  gap-6 flex-row overflow-scroll sm:overflow-hidden group"
  >
    {
      allimg?.map((data) => (
        <a href={`/show/`+data.id}>
        <figure id="cont" class=" min-w-[400px] h-auto overflow-hidden px-5  ">
          <img class="   object-cover rounded-2xl" src={data?.img} alt="" />
        </figure>
      </a>
      ))
    }
  </section>
  <div
    class="hidden sm:flex opacity-0 group-hover:opacity-100 transition-all duration-300 ease-in flex-row relative bottom-72 justify-between items-center"
  >
    <button
      class="boton-baner2 size-[50px] text-6xl flex justify-center items-center bg-white/80 rounded-full"
      >{"<"}</button
    >
    <button
      class="boton-baner size-[50px] text-6xl flex justify-center items-center bg-white/80 rounded-full"
      >{">"}</button
    >
  </div>
  <div class="w-full h-6 hidden sm:flex justify-center items-center">
    
    {
      allimg
        ?.slice(0, -3)
        .map(( index) => (
          <p id={`${index}`} class="dots relative size-6 sm:mx-2 rounded-full" />
        ))
    }
  </div>
</section>
<script>
  const boton = document.querySelector(".boton-baner");
  const boton2 = document.querySelector(".boton-baner2");
  const container = document.querySelector(".cont");
  const allDot = document.querySelectorAll(".dots");
  let mover = 0;
  let dootClass = 0;
  

  allDot.forEach(doot =>{
    doot.addEventListener('click', (e :any )=>{
      
      const dootPress = e?.target?.id 
      mover = dootPress * 500
      dootClass = parseInt(dootPress)
      if(container != null)
      container.scrollLeft = mover;
      confirmDot()
    })
  })

  const confirmDot = () => {
    allDot.forEach((dot:any) => {
      if (dot.id == `${dootClass}`) {
        dot.style.backgroundColor = "#5579ed" as any
        dot.style.scale = 1
      } else {
        dot.style.backgroundColor = "#fff";
        dot.style.scale = .8
      }
    });
  };
  boton?.addEventListener("click", (e) => {
    e.preventDefault();
    if (container != null){
    rightMove(container, 8500);
    }
    
    if (dootClass < 16) {
      dootClass += 1;
      confirmDot();
    }
  });

  boton2?.addEventListener("click", (e) => {
    e.preventDefault();
    if (container != null){
    leftMove(container, 0);
    if (dootClass > 0) {
      dootClass -= 1;
      confirmDot();
    }
  }
  });

  const rightMove = (part: Element, limit: number) => {
    if (part != null) {
      if (mover < limit) {
        let count = 0;
        const timer = setInterval(() => {
          count += 10;
          mover += 10;
          part.scrollLeft = mover;

          if (count >= 500) {
            clearInterval(timer);
          }
        }, 15);
      }
    }
  };
  const leftMove = (part: Element, limit: number) => {
    if (part != null) {
      if (mover > limit) {
        let count = 0;
        const timer = setInterval(() => {
          count += 10;
          mover -= 10;
          part.scrollLeft = mover;
          if (count >= 500) {
            clearInterval(timer);
          }
        }, 15);
      }
    }
  };
  confirmDot();
</script>
<style>
  .dots{
    transition: 3s ease linear ;
  }
</style>
